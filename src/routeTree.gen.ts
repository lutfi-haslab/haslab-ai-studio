/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsageRouteImport } from './routes/usage'
import { Route as StreamRouteImport } from './routes/stream'
import { Route as ProjectRouteImport } from './routes/project'
import { Route as MediaRouteImport } from './routes/media'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ChatRouteImport } from './routes/chat'
import { Route as BuildRouteImport } from './routes/build'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo/tanstack-query'
import { Route as DemoStoreRouteImport } from './routes/demo/store'

const UsageRoute = UsageRouteImport.update({
  id: '/usage',
  path: '/usage',
  getParentRoute: () => rootRouteImport,
} as any)
const StreamRoute = StreamRouteImport.update({
  id: '/stream',
  path: '/stream',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectRoute = ProjectRouteImport.update({
  id: '/project',
  path: '/project',
  getParentRoute: () => rootRouteImport,
} as any)
const MediaRoute = MediaRouteImport.update({
  id: '/media',
  path: '/media',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatRoute = ChatRouteImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRouteImport,
} as any)
const BuildRoute = BuildRouteImport.update({
  id: '/build',
  path: '/build',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStoreRoute = DemoStoreRouteImport.update({
  id: '/demo/store',
  path: '/demo/store',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/build': typeof BuildRoute
  '/chat': typeof ChatRoute
  '/login': typeof LoginRoute
  '/media': typeof MediaRoute
  '/project': typeof ProjectRoute
  '/stream': typeof StreamRoute
  '/usage': typeof UsageRoute
  '/demo/store': typeof DemoStoreRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/build': typeof BuildRoute
  '/chat': typeof ChatRoute
  '/login': typeof LoginRoute
  '/media': typeof MediaRoute
  '/project': typeof ProjectRoute
  '/stream': typeof StreamRoute
  '/usage': typeof UsageRoute
  '/demo/store': typeof DemoStoreRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/build': typeof BuildRoute
  '/chat': typeof ChatRoute
  '/login': typeof LoginRoute
  '/media': typeof MediaRoute
  '/project': typeof ProjectRoute
  '/stream': typeof StreamRoute
  '/usage': typeof UsageRoute
  '/demo/store': typeof DemoStoreRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/build'
    | '/chat'
    | '/login'
    | '/media'
    | '/project'
    | '/stream'
    | '/usage'
    | '/demo/store'
    | '/demo/tanstack-query'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/build'
    | '/chat'
    | '/login'
    | '/media'
    | '/project'
    | '/stream'
    | '/usage'
    | '/demo/store'
    | '/demo/tanstack-query'
  id:
    | '__root__'
    | '/'
    | '/build'
    | '/chat'
    | '/login'
    | '/media'
    | '/project'
    | '/stream'
    | '/usage'
    | '/demo/store'
    | '/demo/tanstack-query'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BuildRoute: typeof BuildRoute
  ChatRoute: typeof ChatRoute
  LoginRoute: typeof LoginRoute
  MediaRoute: typeof MediaRoute
  ProjectRoute: typeof ProjectRoute
  StreamRoute: typeof StreamRoute
  UsageRoute: typeof UsageRoute
  DemoStoreRoute: typeof DemoStoreRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/usage': {
      id: '/usage'
      path: '/usage'
      fullPath: '/usage'
      preLoaderRoute: typeof UsageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/stream': {
      id: '/stream'
      path: '/stream'
      fullPath: '/stream'
      preLoaderRoute: typeof StreamRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/project': {
      id: '/project'
      path: '/project'
      fullPath: '/project'
      preLoaderRoute: typeof ProjectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/media': {
      id: '/media'
      path: '/media'
      fullPath: '/media'
      preLoaderRoute: typeof MediaRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/build': {
      id: '/build'
      path: '/build'
      fullPath: '/build'
      preLoaderRoute: typeof BuildRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/store': {
      id: '/demo/store'
      path: '/demo/store'
      fullPath: '/demo/store'
      preLoaderRoute: typeof DemoStoreRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BuildRoute: BuildRoute,
  ChatRoute: ChatRoute,
  LoginRoute: LoginRoute,
  MediaRoute: MediaRoute,
  ProjectRoute: ProjectRoute,
  StreamRoute: StreamRoute,
  UsageRoute: UsageRoute,
  DemoStoreRoute: DemoStoreRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
